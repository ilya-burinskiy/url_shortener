// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ilya-burinskiy/urlshort/internal/app/storage (interfaces: Storage)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/ilya-burinskiy/urlshort/internal/app/models"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// BatchDelete mocks base method.
func (m *MockStorage) BatchDelete(arg0 context.Context, arg1 []models.Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDelete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchDelete indicates an expected call of BatchDelete.
func (mr *MockStorageMockRecorder) BatchDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDelete", reflect.TypeOf((*MockStorage)(nil).BatchDelete), arg0, arg1)
}

// BatchSave mocks base method.
func (m *MockStorage) BatchSave(arg0 context.Context, arg1 []models.Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchSave", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchSave indicates an expected call of BatchSave.
func (mr *MockStorageMockRecorder) BatchSave(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchSave", reflect.TypeOf((*MockStorage)(nil).BatchSave), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStorage) CreateUser(arg0 context.Context) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStorageMockRecorder) CreateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStorage)(nil).CreateUser), arg0)
}

// FindByOriginalURL mocks base method.
func (m *MockStorage) FindByOriginalURL(arg0 context.Context, arg1 string) (models.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByOriginalURL", arg0, arg1)
	ret0, _ := ret[0].(models.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByOriginalURL indicates an expected call of FindByOriginalURL.
func (mr *MockStorageMockRecorder) FindByOriginalURL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByOriginalURL", reflect.TypeOf((*MockStorage)(nil).FindByOriginalURL), arg0, arg1)
}

// FindByShortenedPath mocks base method.
func (m *MockStorage) FindByShortenedPath(arg0 context.Context, arg1 string) (models.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByShortenedPath", arg0, arg1)
	ret0, _ := ret[0].(models.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByShortenedPath indicates an expected call of FindByShortenedPath.
func (mr *MockStorageMockRecorder) FindByShortenedPath(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByShortenedPath", reflect.TypeOf((*MockStorage)(nil).FindByShortenedPath), arg0, arg1)
}

// FindByUser mocks base method.
func (m *MockStorage) FindByUser(arg0 context.Context, arg1 models.User) ([]models.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUser", arg0, arg1)
	ret0, _ := ret[0].([]models.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUser indicates an expected call of FindByUser.
func (mr *MockStorageMockRecorder) FindByUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUser", reflect.TypeOf((*MockStorage)(nil).FindByUser), arg0, arg1)
}

// Save mocks base method.
func (m *MockStorage) Save(arg0 context.Context, arg1 models.Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockStorageMockRecorder) Save(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockStorage)(nil).Save), arg0, arg1)
}

// URLsCount mocks base method.
func (m *MockStorage) URLsCount(arg0 context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "URLsCount", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// URLsCount indicates an expected call of URLsCount.
func (mr *MockStorageMockRecorder) URLsCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "URLsCount", reflect.TypeOf((*MockStorage)(nil).URLsCount), arg0)
}

// UsersCount mocks base method.
func (m *MockStorage) UsersCount(arg0 context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsersCount", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersCount indicates an expected call of UsersCount.
func (mr *MockStorageMockRecorder) UsersCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersCount", reflect.TypeOf((*MockStorage)(nil).UsersCount), arg0)
}
